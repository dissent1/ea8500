diff -Nuar linux.orig/net/netfilter/nf_conntrack_ftp.c linux.new/net/netfilter/nf_conntrack_ftp.c
--- linux.orig/net/netfilter/nf_conntrack_ftp.c	2015-02-12 11:21:39.489312714 +0800
+++ linux.new/net/netfilter/nf_conntrack_ftp.c	2015-02-12 14:02:30.000000000 +0800
@@ -8,6 +8,7 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
+/* Modifications were made by Linksys on or before Tue Nov 18 10:49:50 CST 2014 */
 
 #include <linux/module.h>
 #include <linux/moduleparam.h>
@@ -251,6 +252,31 @@
 	return get_port(data, 3, dlen, delim, &cmd->u.tcp.port);
 }
 
+static int find_pasv_digit(const char *data, unsigned int *offset)
+{
+	/* Find the first digit*/
+	char parenthese      = '(';
+	unsigned int offnum  = 0;
+	int have_parentheses = 0;
+
+	const char *src = data;
+
+	while(*src)
+	{
+		if(*src == parenthese)
+			have_parentheses = 1;
+
+		if(*src >= '0' && *src <= '9')
+		{
+			*offset = offnum;
+			return have_parentheses;
+		}
+		offnum++;
+		src++;
+	}
+	return have_parentheses;
+}
+
 /* Return 1 for match, 0 for accept, -1 for partial. */
 static int find_pattern(const char *data, size_t dlen,
 			const char *pattern, size_t plen,
@@ -262,6 +288,7 @@
 				      struct nf_conntrack_man *, char))
 {
 	size_t i;
+    char pasv_cmd[5] = "227 ";
 
 	pr_debug("find_pattern `%s': dlen = %Zu\n", pattern, dlen);
 	if (dlen == 0)
@@ -291,11 +318,52 @@
 	pr_debug("Pattern matches!\n");
 	/* Now we've found the constant string, try to skip
 	   to the 'skip' character */
-	for (i = plen; data[i] != skip; i++)
-		if (i == dlen - 1) return -1;
 
-	/* Skip over the last character */
-	i++;
+	/* RFC-1123:
+            A server-FTP MUST implement the PASV command.
+
+            If multiple third-party transfers are to be executed during
+            the same session, a new PASV command MUST be issued before
+            each transfer command, to obtain a unique port pair.
+
+            IMPLEMENTATION:
+                 The format of the 227 reply to a PASV command is not
+                 well standardized.  In particular, an FTP client cannot
+                 assume that the parentheses shown on page 40 of RFC-959
+                 will be present (and in fact, Figure 3 on page 43 omits
+                 them).  Therefore, a User-FTP program that interprets
+                 the PASV reply must scan the reply for the first digit
+                 of the host and port numbers.
+
+                 Note that the host number h1,h2,h3,h4 is the IP address
+                 of the server host that is sending the reply, and that
+                 p1,p2 is a non-default data transfer port that PASV has
+                 assigned.
+	 */
+	
+	if(strncmp(pattern, pasv_cmd, 4)==0)
+	{
+		/* offset is to find the first digit in the response string except the Response Code.
+		 * For command 227, if the Response arg not include parentheses, it should have '\r' as the term char.
+		 * eg:
+		 * 1. 227 Entering Passive Mode (192.168.4.1,66,161)
+		 * 2  227 Entering Passive Mode 192.168.4.1,66,161\r\n
+		 * */
+		unsigned int offset = 0;
+		if(!find_pasv_digit(data+plen, &offset))
+			term = '\r';
+
+		i = offset + plen;
+		if (i == dlen - 1)
+			return -1;
+	}
+	else
+	{
+		for (i = plen; data[i] != skip; i++)
+			if (i == dlen - 1) return -1;
+		/* Skip over the last character */
+		i++;
+	}
 
 	pr_debug("Skipped up to `%c'!\n", skip);
 
