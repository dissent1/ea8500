Common subdirectories: vsftpd-2.0.7/dummyinc and vsftpd-2.0.7-new/dummyinc
Common subdirectories: vsftpd-2.0.7/EXAMPLE and vsftpd-2.0.7-new/EXAMPLE
Common subdirectories: vsftpd-2.0.7/include and vsftpd-2.0.7-new/include
diff -uN vsftpd-2.0.7/Makefile vsftpd-2.0.7-new/Makefile
--- vsftpd-2.0.7/Makefile	2011-05-19 10:06:51.310622548 -0700
+++ vsftpd-2.0.7-new/Makefile	2011-05-19 09:20:40.314809014 -0700
@@ -15,7 +15,7 @@
     banner.o filestr.o parseconf.o secutil.o \
     ascii.o oneprocess.o twoprocess.o privops.o standalone.o hash.o \
     tcpwrap.o ipaddrparse.o access.o features.o readwrite.o opts.o \
-    ssl.o sysutil.o sysdeputil.o
+    ssl.o sysutil.o sysdeputil.o mod_codeconv.c
 
 
 .c.o:
diff -uN vsftpd-2.0.7/mod_codeconv.c vsftpd-2.0.7-new/mod_codeconv.c
--- vsftpd-2.0.7/mod_codeconv.c	1969-12-31 16:00:00.000000000 -0800
+++ vsftpd-2.0.7-new/mod_codeconv.c	2011-05-19 10:01:29.822685712 -0700
@@ -0,0 +1,441 @@
+/*
+ * ProFTPD: mod_codeconv -- local <-> remote charset conversion
+ *
+ * Copyright (c) 2004 by TSUJIKAWA Tohru <tsujikawa@tsg.ne.jp> / All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
+ *
+ */
+
+#define NULL 0
+//#include	"conf.h"
+#include        "include/converters.h"
+#define GB2312
+#ifdef GB2312
+#include "include/gb2312.h"
+#include "include/gbk.h"
+#include "include/gb18030.h"
+#endif
+//#define BIG5
+#ifdef BIG5
+#include "include/big5.h"
+#endif
+#define CP1258
+#ifdef CP1258
+#include "include/cp1258.h"
+#endif
+#define ISO8859
+#ifdef ISO8859
+#include "include/iso8859_1.h"
+#endif
+//
+// directive
+//
+#define	DIRECTIVE_CHARSETLOCAL		"CharsetLocal"
+#define	DIRECTIVE_CHARSETREMOTE		"CharsetRemote"
+
+
+//
+// initialization
+//
+static int codeconv_init(void)
+{
+	return 0;
+}
+
+static int codeconv_sess_init(void)
+{
+	return 0;
+}
+
+char* DeCodeString(char* inString,int charset)
+{
+	int iLenA,iLenB,iLoopA,iLoopB;
+	unsigned short* outStringA;
+	char* outStringB;
+	ucs4_t ucs4Out;
+	int iRet;
+	iLenA = strlen(inString);
+	if(iLenA==0)
+	{
+		return 0;
+	}
+	outStringA = (unsigned short*)malloc(iLenA*sizeof(unsigned short));
+	if(outStringA==0)
+	{
+		return 0;
+	}
+	memset(outStringA,0,iLenA*sizeof(unsigned short));
+	for(iLoopA=0,iLoopB=0;iLoopA<iLenA;iLoopB++)
+	{
+		ucs4Out = 0;
+		iRet = utf8_mbtowc(0,&ucs4Out,(unsigned char*)inString+iLoopA,4);
+		if(iRet==-1)
+		{
+			free(outStringA);
+			return 0;
+		}
+		else
+		{
+			outStringA[iLoopB] = ucs4Out;
+			iLoopA += iRet;
+		}
+	}
+	iLenA = iLoopB;
+	outStringB = (char*)malloc(iLenA*2+1);
+	if(outStringB==0)
+	{
+		free(outStringA);
+		return 0;
+	}
+	memset(outStringB,0,iLenA*2+1);
+	for(iLoopA=0,iLoopB=0;iLoopA<iLenA;iLoopA++)
+	{
+		switch(charset)
+		{
+		case 1:	
+#ifdef GB2312	
+			iRet = gb18030_wctomb(0,(unsigned char*)outStringB+iLoopB,outStringA[iLoopA],iLenA*3-iLoopB);
+#endif
+			break;
+		case 2:
+#ifdef BIG5		
+			iRet = big5_wctomb(0,(unsigned char*)outStringB+iLoopB,outStringA[iLoopA],iLenA*3-iLoopB);
+#endif
+			break;
+		case 3:
+#ifdef CP1258		
+			iRet = cp1258_wctomb(0,(unsigned char*)outStringB+iLoopB,outStringA[iLoopA],iLenA*3-iLoopB);
+#endif
+			break;
+		case 4:
+#ifdef ISO8859		
+			iRet = iso8859_1_wctomb(0,(unsigned char*)outStringB+iLoopB,outStringA[iLoopA],iLenA*3-iLoopB);
+#endif
+			break;
+		default:
+			iRet=-1;
+		}		
+		if(iRet==-1)
+		{
+			free(outStringA);
+			free(outStringB);
+			return 0;
+		}
+		else
+		{
+			iLoopB += iRet;
+		}
+	}
+	free(outStringA);
+	return outStringB;
+}
+
+char* EnCodeString(char* inString,int charset)
+{
+	int iLenA,iLenB,iLoopA,iLoopB;
+	unsigned short* outStringA;
+	char* outStringB;
+	ucs4_t ucs4Out;
+	struct conv_struct conv;
+	int iRet;
+	iLenA = strlen(inString);
+	if(iLenA==0)
+	{
+		return 0;
+	}
+	outStringA = (unsigned short*)malloc(iLenA*sizeof(unsigned short));
+	if(outStringA==0)
+	{
+		return 0;
+	}
+	memset(outStringA,0,iLenA*sizeof(unsigned short));
+	for(iLoopA=0,iLoopB=0;iLoopA<iLenA;iLoopB++)
+	{
+		ucs4Out = 0;
+		switch(charset)
+		{
+		case 1:	
+#ifdef GB2312	
+			iRet = gb18030_mbtowc(0,&ucs4Out,(unsigned char*)inString+iLoopA,2);
+#endif
+			break;
+		case 2:	
+#ifdef BIG5	
+			iRet = big5_mbtowc(0,&ucs4Out,(unsigned char*)inString+iLoopA,2);
+#endif
+			break;
+		case 3:
+#ifdef CP1258	
+			conv.istate = 0;
+			iRet = cp1258_mbtowc(&conv,&ucs4Out,(unsigned char*)inString+iLoopA,2);
+#endif
+			break;
+		case 4:
+#ifdef ISO8859		
+			iRet = iso8859_1_mbtowc(0,&ucs4Out,(unsigned char*)inString+iLoopA,2);
+#endif
+			break;
+		default:
+			iRet = -1;
+		}
+		if(iRet==-1)
+		{
+			free(outStringA);
+			return 0;
+		}
+		else
+		{
+			outStringA[iLoopB] = ucs4Out;
+			iLoopA += iRet;
+		}
+	}
+	iLenA = iLoopB;
+	outStringB = (char*)malloc(iLenA*3+1);
+	if(outStringB==0)
+	{
+		free(outStringA);
+		return 0;
+	}
+	memset(outStringB,0,iLenA*3+1);
+	for(iLoopA=0,iLoopB=0;iLoopA<iLenA;iLoopA++)
+	{
+		iRet = utf8_wctomb(0,(unsigned char*)outStringB+iLoopB,outStringA[iLoopA],iLenA*3-iLoopB);
+		if(iRet==-1)
+		{
+			free(outStringA);
+			free(outStringB);
+			return 0;
+		}
+		else
+		{
+			iLoopB += iRet;
+		}
+	}
+	free(outStringA);
+	return outStringB;
+}
+
+char* remote2local(char* remote,int charset)
+{
+	char* out_ptr;
+	//cprintf("remote=(%s)\r\n",remote);
+	out_ptr = EnCodeString(remote,charset);
+	if(out_ptr)
+	{
+		//cprintf("out_ptr=(%s)\r\n",out_ptr);
+	}
+	return out_ptr;
+}
+char* local2remote(char* local,int charset)
+{
+	char* out_ptr;
+	//cprintf("local=(%s)\r\n",local);
+	out_ptr = DeCodeString(local,charset);
+        if(out_ptr)
+        {
+                //cprintf("out_ptr=(%s)\r\n",out_ptr);
+        }
+	return out_ptr;
+}
+#if 0
+char* remote2local(struct pool* pool, char* remote)
+{
+	iconv_t	ic;
+	char*	local;
+	char*	in_ptr;
+	char*	out_ptr;
+	size_t	inbytesleft, outbytesleft;
+
+	config_rec*	conf_l = NULL;
+	config_rec*	conf_r = NULL;
+	cprintf("file(%s)\r\n",main_server->conf);
+	conf_l = find_config(main_server->conf, CONF_PARAM, DIRECTIVE_CHARSETLOCAL, FALSE);
+	conf_r = find_config(main_server->conf, CONF_PARAM, DIRECTIVE_CHARSETREMOTE, FALSE);
+	cprintf("conf_l(%s),conf_r(%s)\r\n",conf_l->argv[0],conf_r->argv[0]);
+	if (!conf_l || !conf_r) return NULL;
+
+	ic = iconv_open("UTF-8","GB2312");//conf_l->argv[0], conf_r->argv[0]);
+	cprintf("ic=%d,error=%d\r\n",ic,errno);
+	if (ic == (iconv_t)(-1)) return NULL;
+
+	iconv(ic, NULL, NULL, NULL, NULL);
+
+	inbytesleft = strlen(remote);
+	outbytesleft = inbytesleft*3;
+	local = palloc(pool, outbytesleft+1);
+
+	in_ptr = remote; out_ptr = local;
+	while (inbytesleft) {
+		if (iconv(ic, &in_ptr, &inbytesleft, &out_ptr, &outbytesleft) == -1) {
+			*out_ptr = '?'; out_ptr++; outbytesleft--;
+			in_ptr++; inbytesleft--;
+			break;
+		}
+	}
+	*out_ptr = 0;
+
+	iconv_close(ic);
+
+	return local;
+}
+
+
+char* local2remote(char* local)
+{
+	iconv_t	ic;
+	char*	remote;
+	char*	in_ptr;
+	char*	out_ptr;
+	size_t	inbytesleft, outbytesleft;
+
+	config_rec*	conf_l = NULL;
+	config_rec*	conf_r = NULL;
+
+	conf_l = find_config(main_server->conf, CONF_PARAM, DIRECTIVE_CHARSETLOCAL, FALSE);
+	conf_r = find_config(main_server->conf, CONF_PARAM, DIRECTIVE_CHARSETREMOTE, FALSE);
+	cprintf("conf_l(%s),conf_r(%s)\r\n",conf_l->argv[0],conf_r->argv[0]);
+	if (!conf_l || !conf_r) return NULL;
+
+	ic = iconv_open("GB2312","UTF-8");//conf_r->argv[0], conf_l->argv[0]);
+	cprintf("1111ic=%d,error=%d\r\n",ic,errno);
+	if (ic == (iconv_t)(-1)) return NULL;
+
+	iconv(ic, NULL, NULL, NULL, NULL);
+
+	inbytesleft = strlen(local);
+	outbytesleft = inbytesleft*3;
+	remote = malloc(outbytesleft+1);
+
+	in_ptr = local; out_ptr = remote;
+	while (inbytesleft) {
+		if (iconv(ic, &in_ptr, &inbytesleft, &out_ptr, &outbytesleft) == -1) {
+			*out_ptr = '?'; out_ptr++; outbytesleft--;
+			in_ptr++; inbytesleft--;
+			break;
+		}
+	}
+	*out_ptr = 0;
+
+	iconv_close(ic);
+
+	return remote;
+}
+
+#endif
+//
+// module handler
+//
+#if 0
+MODRET codeconv_pre_any(cmd_rec* cmd)
+{
+	char*	p;
+	int		i;
+
+	p = remote2local(cmd->pool, cmd->arg);
+	if (p) cmd->arg = p;
+
+	for (i = 0; i < cmd->argc; i++) {
+		p = remote2local(cmd->pool, cmd->argv[i]);
+		if (p) cmd->argv[i] = p;
+	}
+
+	return DECLINED(cmd);
+}
+
+
+//
+// local charset directive "CharsetLocal"
+//
+MODRET set_charsetlocal(cmd_rec *cmd) {
+  config_rec *c = NULL;
+
+  /* Syntax: CharsetLocal iconv-charset-name */
+
+  CHECK_ARGS(cmd, 1);
+  CHECK_CONF(cmd, CONF_ROOT|CONF_VIRTUAL|CONF_GLOBAL);
+
+  c = add_config_param_str(DIRECTIVE_CHARSETLOCAL, 1, cmd->argv[1]);
+
+  return HANDLED(cmd);
+}
+
+//
+// remote charset directive "CharsetRemote"
+//
+MODRET set_charsetremote(cmd_rec *cmd) {
+  config_rec *c = NULL;
+
+  /* Syntax: CharsetRemote iconv-charset-name */
+
+  CHECK_ARGS(cmd, 1);
+  CHECK_CONF(cmd, CONF_ROOT|CONF_VIRTUAL|CONF_GLOBAL);
+
+  c = add_config_param_str(DIRECTIVE_CHARSETREMOTE, 1, cmd->argv[1]);
+
+  return HANDLED(cmd);
+}
+
+
+//
+// module 用 directive
+//
+static conftable codeconv_conftab[] = {
+	{ DIRECTIVE_CHARSETLOCAL,		set_charsetlocal,		NULL },
+	{ DIRECTIVE_CHARSETREMOTE,		set_charsetremote,		NULL },
+	{ NULL, NULL, NULL }
+};
+
+
+//
+// trap するコマンド一覧
+//
+static cmdtable codeconv_cmdtab[] = {
+	{ PRE_CMD,		C_ANY,	G_NONE, codeconv_pre_any,	FALSE, FALSE },
+	{ 0,			NULL }
+};
+
+
+//
+// module 情報
+//
+module codeconv_module = {
+
+	/* Always NULL */
+	NULL, NULL,
+
+	/* Module API version (2.0) */
+	0x20,
+
+	/* Module name */
+	"codeconv",
+
+	/* Module configuration directive handlers */
+	codeconv_conftab,
+
+	/* Module command handlers */
+	codeconv_cmdtab,
+
+	/* Module authentication handlers (none in this case) */
+	NULL,
+
+	/* Module initialization */
+	codeconv_init,
+
+	/* Session initialization */
+	codeconv_sess_init
+
+};
+#endif
diff -uN vsftpd-2.0.7/parseconf.c vsftpd-2.0.7-new/parseconf.c
--- vsftpd-2.0.7/parseconf.c	2008-07-29 18:53:05.000000000 -0700
+++ vsftpd-2.0.7-new/parseconf.c	2011-05-19 09:28:26.054751162 -0700
@@ -136,6 +136,7 @@
   { "delay_successful_login", &tunable_delay_successful_login },
   { "max_login_fails", &tunable_max_login_fails },
   { "chown_upload_mode", &tunable_chown_upload_mode },
+  { "ftp_characterset",&ftp_characterset},
   { 0, 0 }
 };
 
Common subdirectories: vsftpd-2.0.7/port and vsftpd-2.0.7-new/port
diff -uN vsftpd-2.0.7/postlogin.c vsftpd-2.0.7-new/postlogin.c
--- vsftpd-2.0.7/postlogin.c	2008-07-29 18:51:09.000000000 -0700
+++ vsftpd-2.0.7-new/postlogin.c	2011-05-19 09:56:30.979114321 -0700
@@ -82,6 +82,7 @@
 void
 process_post_login(struct vsf_session* p_sess)
 {
+  char *p;
   str_getcwd(&p_sess->home_str);
   if (p_sess->is_anonymous)
   {
@@ -146,6 +147,19 @@
         str_copy(&s_src_str, &s_rhs_str);
       }
     }
+    if(cmd_ok)
+    {
+        if(ftp_characterset>0)
+        {
+
+            p=remote2local(str_getbuf(&p_sess->ftp_cmd_str),ftp_characterset);
+            if (p)
+            {
+                strcpy(str_getbuf(&p_sess->ftp_cmd_str), p);
+            }
+            if(p) free(p);
+        }
+    }
     if (!cmd_ok)
     {
       vsf_cmdio_write(p_sess, FTP_NOPERM, "Permission denied.");
@@ -1837,6 +1851,7 @@
 static void
 resolve_tilde(struct mystr* p_str, struct vsf_session* p_sess)
 {
+  char *p;
   unsigned int len = str_getlen(p_str);
   if (len > 0 && str_get_char_at(p_str, 0) == '~')
   {
@@ -1866,6 +1881,16 @@
       }
     }
   }
+  if(ftp_characterset>0&& len>0)
+  {
+    p=remote2local(str_getbuf(p_str), ftp_characterset);
+    if(p)
+    {
+        strcpy(str_getbuf(p_str),p);
+        p_str->PRIVATE_HANDS_OFF_len=strlen(p);
+        free(p);
+    }
+  }
 }
 
 static void handle_logged_in_user(struct vsf_session* p_sess)
Binary files vsftpd-2.0.7/.postlogin.c.swp and vsftpd-2.0.7-new/.postlogin.c.swp differ
diff -uN vsftpd-2.0.7/readwrite.c vsftpd-2.0.7-new/readwrite.c
--- vsftpd-2.0.7/readwrite.c	2008-07-29 18:30:16.000000000 -0700
+++ vsftpd-2.0.7-new/readwrite.c	2011-05-19 09:59:35.778121516 -0700
@@ -15,11 +15,36 @@
 #include "privsock.h"
 #include "defs.h"
 #include "sysutil.h"
+#include "str.h"
+#include "tunables.h"
+#include <stdio.h>
+#include <string.h>
+
+extern char* local2remote( char* local, int charset);
+extern char* remote2local( char* remote, int charset);
+
 
 int
-ftp_write_str(const struct vsf_session* p_sess, const struct mystr* p_str,
+ftp_write_str(const struct vsf_session* p_sess, struct mystr* p_str,
               enum EVSFRWTarget target)
 {
+
+  char* p;
+  //cprintf("ftp_write_str[%s],len0=%d,len1=%d\r\n",p_str->PRIVATE_HANDS_OFF_p_buf,p_str->PRIVATE_HANDS_OFF_len,p_str->PRIVATE_HANDS_OFF_alloc_bytes);
+  //if(tunable_charset_filter_enable)
+  //  str_iconv_write(p_str);
+  if(ftp_characterset>0 && p_str->PRIVATE_HANDS_OFF_len>0 && p_str->PRIVATE_HANDS_OFF_len<p_str->PRIVATE_HANDS_OFF_alloc_bytes)
+  {
+     p_str->PRIVATE_HANDS_OFF_p_buf[p_str->PRIVATE_HANDS_OFF_len]=0;
+     p=local2remote(p_str->PRIVATE_HANDS_OFF_p_buf,ftp_characterset);
+     if (p && strlen(p)<p_str->PRIVATE_HANDS_OFF_alloc_bytes)
+     {
+         strcpy(p_str->PRIVATE_HANDS_OFF_p_buf, p);
+         p_str->PRIVATE_HANDS_OFF_len=strlen(p_str->PRIVATE_HANDS_OFF_p_buf);
+     }
+     if(p) free(p);
+  }
+
   if (target == kVSFRWData)
   {
     if (p_sess->data_use_ssl)
diff -uN vsftpd-2.0.7/readwrite.h vsftpd-2.0.7-new/readwrite.h
--- vsftpd-2.0.7/readwrite.h	2008-07-29 18:30:08.000000000 -0700
+++ vsftpd-2.0.7-new/readwrite.h	2011-05-19 10:00:42.566685811 -0700
@@ -10,7 +10,7 @@
   kVSFRWData
 };
 
-int ftp_write_str(const struct vsf_session* p_sess, const struct mystr* p_str,
+int ftp_write_str(const struct vsf_session* p_sess, struct mystr* p_str,
                   enum EVSFRWTarget target);
 int ftp_read_data(struct vsf_session* p_sess, char* p_buf, unsigned int len);
 int ftp_write_data(const struct vsf_session* p_sess, const char* p_buf,
Common subdirectories: vsftpd-2.0.7/RedHat and vsftpd-2.0.7-new/RedHat
Common subdirectories: vsftpd-2.0.7/SECURITY and vsftpd-2.0.7-new/SECURITY
diff -uN vsftpd-2.0.7/tunables.c vsftpd-2.0.7-new/tunables.c
--- vsftpd-2.0.7/tunables.c	2008-07-29 18:52:23.000000000 -0700
+++ vsftpd-2.0.7-new/tunables.c	2011-05-19 09:57:07.126680228 -0700
@@ -68,6 +68,7 @@
 int tunable_tilde_user_enable = 0;
 int tunable_force_anon_logins_ssl = 0;
 int tunable_force_anon_data_ssl = 0;
+int ftp_characterset=0;
 int tunable_mdtm_write = 1;
 int tunable_lock_upload_files = 1;
 int tunable_pasv_addr_resolve = 0;
diff -uN vsftpd-2.0.7/tunables.h vsftpd-2.0.7-new/tunables.h
--- vsftpd-2.0.7/tunables.h	2008-07-29 18:52:11.000000000 -0700
+++ vsftpd-2.0.7-new/tunables.h	2011-05-19 09:52:39.262172097 -0700
@@ -64,6 +64,7 @@
 extern int tunable_tilde_user_enable;         /* Support e.g. ~chris */
 extern int tunable_force_anon_logins_ssl;     /* Require anon logins use SSL */
 extern int tunable_force_anon_data_ssl;       /* Require anon data uses SSL */
+extern int ftp_characterset;
 extern int tunable_mdtm_write;                /* Allow MDTM to set timestamps */
 extern int tunable_lock_upload_files;         /* Lock uploading files */
 extern int tunable_pasv_addr_resolve;         /* DNS resolve pasv_addr */
diff -uN vsftpd-2.0.7/vsf_findlibs.sh vsftpd-2.0.7-new/vsf_findlibs.sh
--- vsftpd-2.0.7/vsf_findlibs.sh	2008-07-28 18:52:35.000000000 -0700
+++ vsftpd-2.0.7-new/vsf_findlibs.sh	2011-05-19 09:23:53.206803098 -0700
@@ -43,9 +43,9 @@
 locate_library /usr/lib/libsec.sl && echo "-lsec";
 
 # Look for libcap (capabilities)
-locate_library /lib/libcap.so.1 && echo "/lib/libcap.so.1";
-locate_library /usr/lib/libcap.so && echo "-lcap";
-locate_library /lib/libcap.so && echo "-lcap";
+#locate_library /lib/libcap.so.1 && echo "/lib/libcap.so.1";
+#locate_library /usr/lib/libcap.so && echo "-lcap";
+#locate_library /lib/libcap.so && echo "-lcap";
 
 # Solaris needs this for nanosleep()..
 locate_library /lib/libposix4.so && echo "-lposix4";
Common subdirectories: vsftpd-2.0.7/xinetd.d and vsftpd-2.0.7-new/xinetd.d
