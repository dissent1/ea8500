diff -Nur ppp-2.4.4.orig/configure ppp-2.4.4.new/configure
--- ppp-2.4.4.orig/configure	2014-01-14 12:53:16.318382961 +0800
+++ ppp-2.4.4.new/configure	2014-01-14 12:37:46.154379915 +0800
@@ -1,5 +1,6 @@
 #!/bin/sh
 # Modifications were made by Cisco Systems, Inc. on or before Wed Nov 30 13:28:05 PST 2011
+# Modifications were made by Belkin International, Inc. on or before Fri Sep 13 14:13:39 PDT 2013
 # $Id: configure,v 1.37 2005/06/26 23:53:17 carlsonj Exp $
 
 # Where to install stuff by default
@@ -195,7 +196,7 @@
     mkmkf $ksrc/Makefile.top Makefile
     mkmkf $ksrc/Makedefs$compiletype Makedefs.com
     for dir in pppd pppstats chat pppdump pppd/plugins pppd/plugins/rp-pppoe \
-	       pppd/plugins/radius pppd/plugins/pppoatm; do
+	       pppd/plugins/radius pppd/plugins/pppoatm pppd/plugins/pppol2tp; do
 	mkmkf $dir/Makefile.$makext $dir/Makefile
     done
     if [ -f $ksrc/Makefile.$makext$archvariant ]; then
diff -Nur ppp-2.4.4.orig/include/linux/if_pppox.h ppp-2.4.4.new/include/linux/if_pppox.h
--- ppp-2.4.4.orig/include/linux/if_pppox.h	2014-01-14 12:53:16.322382961 +0800
+++ ppp-2.4.4.new/include/linux/if_pppox.h	2014-01-14 12:37:46.154379915 +0800
@@ -1,6 +1,7 @@
+/* Modifications were made by Belkin International, Inc. on or before Fri Sep 13 14:13:39 PDT 2013 */
 /***************************************************************************
  * Linux PPP over X - Generic PPP transport layer sockets
- * Linux PPP over Ethernet (PPPoE) Socket Implementation (RFC 2516) 
+ * Linux PPP over Ethernet (PPPoE) Socket Implementation (RFC 2516)
  *
  * This file supplies definitions required by the PPP over Ethernet driver
  * (pppox.c).  All version information wrt this file is located in pppox.c
@@ -19,15 +20,16 @@
 
 #include <asm/types.h>
 #include <asm/byteorder.h>
+#include <linux/version.h>
 
 #ifdef  __KERNEL__
+#include <linux/in.h>
 #include <linux/if_ether.h>
 #include <linux/if.h>
 #include <linux/netdevice.h>
-#include <linux/sched.h>
-#include <asm/semaphore.h>
 #include <linux/ppp_channel.h>
 #endif /* __KERNEL__ */
+#include <linux/if_pppol2tp.h>
 
 /* For user-space programs to pick up these definitions
  * which they wouldn't get otherwise without defining __KERNEL__
@@ -37,30 +39,47 @@
 #define PF_PPPOX	AF_PPPOX
 #endif /* !(AF_PPPOX) */
 
-/************************************************************************ 
- * PPPoE addressing definition 
- */ 
-typedef __u16 sid_t; 
-struct pppoe_addr{ 
-       sid_t           sid;                    /* Session identifier */ 
-       unsigned char   remote[ETH_ALEN];       /* Remote address */ 
-       char            dev[IFNAMSIZ];          /* Local device to use */ 
-}; 
- 
-/************************************************************************ 
- * Protocols supported by AF_PPPOX 
- */ 
-#define PX_PROTO_OE    0 /* Currently just PPPoE */
-#define PX_MAX_PROTO   1	
- 
-struct sockaddr_pppox { 
-       sa_family_t     sa_family;            /* address family, AF_PPPOX */ 
-       unsigned int    sa_protocol;          /* protocol identifier */ 
-       union{ 
-               struct pppoe_addr       pppoe; 
-       }sa_addr; 
-}__attribute__ ((packed)); 
+/************************************************************************
+ * PPPoE addressing definition
+ */
+typedef __u16 sid_t;
+struct pppoe_addr{
+       sid_t           sid;                    /* Session identifier */
+       unsigned char   remote[ETH_ALEN];       /* Remote address */
+       char            dev[IFNAMSIZ];          /* Local device to use */
+};
 
+struct pptp_addr{
+       __u16           call_id;
+       struct in_addr  sin_addr;
+};
+/************************************************************************
+ * Protocols supported by AF_PPPOX
+ */
+#define PX_PROTO_OE    0 /* Currently just PPPoE */
+#define PX_PROTO_OL2TP 1 /* Now L2TP also */
+#define PX_PROTO_PPTP  2
+#define PX_MAX_PROTO   3
+
+struct sockaddr_pppox {
+       sa_family_t     sa_family;            /* address family, AF_PPPOX */
+       unsigned int    sa_protocol;          /* protocol identifier */
+       union{
+               struct pppoe_addr       pppoe;
+               struct pptp_addr        pptp;
+       }sa_addr;
+}__attribute__ ((packed));
+
+/* The use of the above union isn't viable because the size of this
+ * struct must stay fixed over time -- applications use sizeof(struct
+ * sockaddr_pppox) to fill it. We use a protocol specific sockaddr
+ * type instead.
+ */
+struct sockaddr_pppol2tp {
+	sa_family_t     sa_family;      /* address family, AF_PPPOX */
+	unsigned int    sa_protocol;    /* protocol identifier */
+	struct pppol2tp_addr pppol2tp;
+}__attribute__ ((packed));
 
 /*********************************************************************
  *
@@ -68,9 +87,9 @@
  *
  ********************************************************************/
 
-#define PPPOEIOCSFWD	_IOW(0xB1 ,0, sizeof(struct sockaddr_pppox))
+#define PPPOEIOCSFWD	_IOW(0xB1 ,0, size_t)
 #define PPPOEIOCDFWD	_IO(0xB1 ,1)
-/*#define PPPOEIOCGFWD	_IOWR(0xB1,2, sizeof(struct sockaddr_pppox))*/
+/*#define PPPOEIOCGFWD	_IOWR(0xB1,2, size_t)*/
 
 /* Codes to identify message types */
 #define PADI_CODE	0x09
@@ -112,34 +131,100 @@
 	struct pppoe_tag tag[0];
 } __attribute__ ((packed));
 
+
+/* Socket options */
+#define PPTP_SO_TIMEOUT 1
+
+
 #ifdef __KERNEL__
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,0)
+struct pppoe_opt {
+	struct net_device      *dev;	  /* device associated with socket*/
+	struct pppoe_addr	pa;	  /* what this socket is bound to*/
+	struct sockaddr_pppox	relay;	  /* what socket data will be
+					     relayed to (PPPoE relaying) */
+};
+#endif
+struct pptp_opt {
+	struct pptp_addr	src_addr;
+	struct pptp_addr	dst_addr;
+	__u32 ack_sent, ack_recv;
+	__u32 seq_sent, seq_recv;
+	int ppp_flags;
+};
+#define PPTP_FLAG_PAUSE 0
+#define PPTP_FLAG_PROC 1
+
+#include <net/sock.h>
+
+struct pppox_sock {
+	/* struct sock must be the first member of pppox_sock */
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	struct ppp_channel	chan;
+	struct sock		*sk;
+	#else
+	struct sock		sk;
+	struct ppp_channel	chan;
+	#endif
+	struct pppox_sock	*next;	  /* for hash table */
+	union {
+		struct pppoe_opt pppoe;
+		struct pptp_opt pptp;
+	} proto;
+	unsigned short		num;
+};
+#define pppoe_dev	proto.pppoe.dev
+#define pppoe_pa	proto.pppoe.pa
+#define pppoe_relay	proto.pppoe.relay
+
+static inline struct pppox_sock *pppox_sk(struct sock *sk)
+{
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	return (struct pppox_sock *)sk->protinfo.pppox;
+	#else
+	return (struct pppox_sock *)sk;
+	#endif
+}
+
+static inline struct sock *sk_pppox(struct pppox_sock *po)
+{
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,0)
+	return po->sk;
+	#else
+	return (struct sock *)po;
+	#endif
+}
+
+struct module;
 
 struct pppox_proto {
-	int (*create)(struct socket *sock);
-	int (*ioctl)(struct socket *sock, unsigned int cmd,
-		     unsigned long arg);
+	#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,24)
+	int		(*create)(struct socket *sock);
+	#else
+	int		(*create)(struct net *net, struct socket *sock);
+	#endif
+	int		(*ioctl)(struct socket *sock, unsigned int cmd,
+				 unsigned long arg);
+  #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,15)
+	struct module	*owner;
+	#endif
 };
 
 extern int register_pppox_proto(int proto_num, struct pppox_proto *pp);
 extern void unregister_pppox_proto(int proto_num);
 extern void pppox_unbind_sock(struct sock *sk);/* delete ppp-channel binding */
-extern int pppox_channel_ioctl(struct ppp_channel *pc, unsigned int cmd,
-			       unsigned long arg);
+extern int pppox_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg);
 
-/* PPPoE socket states */
+/* PPPoX socket states */
 enum {
     PPPOX_NONE		= 0,  /* initial state */
     PPPOX_CONNECTED	= 1,  /* connection established ==TCP_ESTABLISHED */
     PPPOX_BOUND		= 2,  /* bound to ppp device */
     PPPOX_RELAY		= 4,  /* forwarding is enabled */
-    PPPOX_ZOMBIE        = 8,  /* dead, but still connected */
-    PPPOX_DEAD		= 16
+    PPPOX_ZOMBIE	= 8,  /* dead, but still bound to ppp device */
+    PPPOX_DEAD		= 16  /* dead, useless, please clean me up!*/
 };
 
-extern struct ppp_channel_ops pppoe_chan_ops;
-
-extern int pppox_proto_init(struct net_proto *np);
-
 #endif /* __KERNEL__ */
 
 #endif /* !(__LINUX_IF_PPPOX_H) */
diff -Nur ppp-2.4.4.orig/pppd/plugins/Makefile.linux ppp-2.4.4.new/pppd/plugins/Makefile.linux
--- ppp-2.4.4.orig/pppd/plugins/Makefile.linux	2014-01-14 12:53:16.330382961 +0800
+++ ppp-2.4.4.new/pppd/plugins/Makefile.linux	2014-01-14 12:37:46.166379915 +0800
@@ -1,4 +1,5 @@
 # Modifications were made by Cisco Systems, Inc. on or before Wed Nov 30 13:28:05 PST 2011
+# Modifications were made by Belkin International, Inc. on or before Fri Sep 13 14:13:39 PDT 2013
 #CC	= gcc
 COPTS	= -O2 -g
 CFLAGS	= $(COPTS) -I.. -I../../include -fPIC
@@ -10,7 +11,7 @@
 MANDIR = $(inner_DESTDIR)/share/man/man8
 LIBDIR = $(inner_DESTDIR)/lib/pppd/$(VERSION)
 
-SUBDIRS := rp-pppoe pppoatm
+SUBDIRS := rp-pppoe pppoatm pppol2tp
 # Uncomment the next line to include the radius authentication plugin
 SUBDIRS += radius
 PLUGINS := minconn.so passprompt.so passwordfd.so winbind.so
diff -Nur ppp-2.4.4.orig/pppd/plugins/pppol2tp/l2tp_event.h ppp-2.4.4.new/pppd/plugins/pppol2tp/l2tp_event.h
--- ppp-2.4.4.orig/pppd/plugins/pppol2tp/l2tp_event.h	1970-01-01 08:00:00.000000000 +0800
+++ ppp-2.4.4.new/pppd/plugins/pppol2tp/l2tp_event.h	2014-01-14 12:37:46.166379915 +0800
@@ -0,0 +1,116 @@
+/* Modifications were made by Belkin International, Inc. on or before Fri Sep 13 14:13:39 PDT 2013 */
+/*****************************************************************************
+ * Copyright (C) 2008 Katalix Systems Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ *****************************************************************************/
+
+/*
+ * OpenL2TP application event interface definition.
+ *
+ * This plugin is used by OpenL2TP to receive events from pppd.
+ *
+ * Events are used as follows:-
+ * PPP_UPDOWN_IND	- tells OpenL2TP of PPP session state changes.
+ * PPP_ACCM_IND		- tells OpenL2TP of PPP ACCM negotiated options
+ *
+ * Non-GPL applications are permitted to use this API, provided that
+ * any changes to this source file are made available under GPL terms.
+ */
+
+#ifndef L2TP_EVENT_H
+#define L2TP_EVENT_H
+
+#include <stdint.h>
+
+/*****************************************************************************
+ * API definition
+ *****************************************************************************/
+
+#define OPENL2TP_EVENT_SOCKET_NAME		"/tmp/openl2tp-event.sock"
+
+#define OPENL2TP_MSG_TYPE_NULL			0
+#define OPENL2TP_MSG_TYPE_PPP_UPDOWN_IND	1
+#define OPENL2TP_MSG_TYPE_PPP_ACCM_IND		2
+#define OPENL2TP_MSG_TYPE_MAX			3
+
+enum {
+	OPENL2TP_TLV_TYPE_TUNNEL_ID,
+	OPENL2TP_TLV_TYPE_SESSION_ID,
+	OPENL2TP_TLV_TYPE_PPP_ACCM,
+	OPENL2TP_TLV_TYPE_PPP_UNIT,
+	OPENL2TP_TLV_TYPE_PPP_IFNAME,
+	OPENL2TP_TLV_TYPE_PPP_USER_NAME,
+	OPENL2TP_TLV_TYPE_PPP_STATE
+};
+#define OPENL2TP_TLV_TYPE_MAX		(OPENL2TP_TLV_TYPE_PPP_STATE + 1)
+
+#define OPENL2TP_MSG_MAX_LEN		512
+#define OPENL2TP_MSG_SIGNATURE		0x6b6c7831
+
+#define ALIGN32(n) (((n) + 3) & ~3)
+
+/* Each data field in a message is defined by a Type-Length-Value
+ * (TLV) tuplet.
+ */
+struct openl2tp_event_tlv {
+	uint16_t	tlv_type;
+	uint16_t	tlv_len;
+	uint8_t		tlv_value[0];
+};
+
+/* Messages contain a small header followed by a list of TLVs. Each
+ * TLV starts on a 4-byte boundary.
+ */
+struct openl2tp_event_msg {
+	uint32_t	msg_signature;	/* OPENL2TP_MSG_SIGNATURE */
+	uint16_t	msg_type;	/* OPENL2TP_MSG_TYPE_* */
+	uint16_t	msg_len;	/* length of data that follows */
+	uint8_t		msg_data[0];	/* list of TLVs, each always longword aligned */
+};
+
+/* These structs define the data field layout of each TLV.
+ */
+struct openl2tp_tlv_tunnel_id {
+	uint16_t	tunnel_id;
+};
+
+struct openl2tp_tlv_session_id {
+	uint16_t	session_id;
+};
+
+struct openl2tp_tlv_ppp_accm {
+	uint32_t	send_accm;
+	uint32_t	recv_accm;
+};
+
+struct openl2tp_tlv_ppp_unit {
+	uint32_t	unit;
+};
+
+struct openl2tp_tlv_ppp_state {
+	uint8_t		up;		/* 0=down, 1=up */
+};
+
+struct openl2tp_tlv_ppp_ifname {
+	char		ifname[0];
+};
+
+struct openl2tp_tlv_ppp_user_name {
+	char		user_name[0];
+};
+
+#endif /* L2TP_EVENT_H */
diff -Nur ppp-2.4.4.orig/pppd/plugins/pppol2tp/Makefile.linux ppp-2.4.4.new/pppd/plugins/pppol2tp/Makefile.linux
--- ppp-2.4.4.orig/pppd/plugins/pppol2tp/Makefile.linux	1970-01-01 08:00:00.000000000 +0800
+++ ppp-2.4.4.new/pppd/plugins/pppol2tp/Makefile.linux	2014-01-14 12:43:22.230381016 +0800
@@ -0,0 +1,30 @@
+#Modifications were made by Belkin International, Inc. on or before Fri Sep 13 14:13:39 PDT 2013
+#CC	= gcc
+COPTS	= -O2 -g
+CFLAGS	= $(COPTS) -I. -I../.. -I../../../include -fPIC
+LDFLAGS	= -shared
+INSTALL	= install
+
+#***********************************************************************
+
+#DESTDIR = @DESTDIR@
+LIBDIR = $(INSTROOT)/lib/pppd/$(VERSION)
+
+VERSION = $(shell awk -F '"' '/VERSION/ { print $$2; }' ../../patchlevel.h)
+
+PLUGINS := pppol2tp.so 
+
+all: $(PLUGINS)
+
+%.so: %.o
+	$(CC) $(CFLAGS) -o $@ -shared $^ $(LIBS)
+
+install: all
+	$(INSTALL) -d -m 755 $(LIBDIR)
+	$(INSTALL) -c -m 4550 $(PLUGINS) $(LIBDIR)
+
+clean:
+	rm -f *.o *.so
+
+%.o: %.c
+	$(CC) $(CFLAGS) -c -o $@ $<
diff -Nur ppp-2.4.4.orig/pppd/plugins/pppol2tp/openl2tp.c ppp-2.4.4.new/pppd/plugins/pppol2tp/openl2tp.c
--- ppp-2.4.4.orig/pppd/plugins/pppol2tp/openl2tp.c	1970-01-01 08:00:00.000000000 +0800
+++ ppp-2.4.4.new/pppd/plugins/pppol2tp/openl2tp.c	2014-01-14 12:37:46.166379915 +0800
@@ -0,0 +1,295 @@
+/* Modifications were made by Belkin International, Inc. on or before Fri Sep 13 14:13:39 PDT 2013 */
+/*****************************************************************************
+ * Copyright (C) 2006,2007,2008 Katalix Systems Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ *****************************************************************************/
+
+/* pppd plugin for interfacing to openl2tpd */
+
+#include <unistd.h>
+#include <string.h>
+#include <stdlib.h>
+#include <errno.h>
+#include "pppd.h"
+#include "pathnames.h"
+#include "fsm.h"
+#include "lcp.h"
+#include "ccp.h"
+#include "ipcp.h"
+#include <sys/stat.h>
+#include <net/if.h>
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <netinet/in.h>
+#include <signal.h>
+#include <linux/version.h>
+#include <linux/sockios.h>
+
+#ifndef aligned_u64
+/* should be defined in sys/types.h */
+#define aligned_u64 unsigned long long __attribute__((aligned(8)))
+#endif
+#include <linux/types.h>
+#include <linux/if_ether.h>
+#include <linux/ppp_defs.h>
+#include <linux/if_ppp.h>
+#include <linux/if_pppox.h>
+#include <linux/if_pppol2tp.h>
+
+#include "l2tp_event.h"
+
+extern int pppol2tp_tunnel_id;
+extern int pppol2tp_session_id;
+
+extern void (*pppol2tp_send_accm_hook)(int tunnel_id, int session_id,
+				       uint32_t send_accm, uint32_t recv_accm);
+extern void (*pppol2tp_ip_updown_hook)(int tunnel_id, int session_id, int up);
+
+const char pppd_version[] = VERSION;
+
+static int openl2tp_fd = -1;
+
+static void (*old_pppol2tp_send_accm_hook)(int tunnel_id, int session_id,
+					   uint32_t send_accm,
+					   uint32_t recv_accm) = NULL;
+static void (*old_pppol2tp_ip_updown_hook)(int tunnel_id, int session_id,
+					   int up) = NULL;
+static void (*old_multilink_join_hook)(void) = NULL;
+
+/*****************************************************************************
+ * OpenL2TP interface.
+ * We send a PPP_ACCM_IND to openl2tpd to report ACCM values and
+ * SESSION_PPP_UPDOWN_IND to indicate when the PPP link comes up or
+ * goes down.
+ *****************************************************************************/
+
+static int openl2tp_client_create(void)
+{
+	struct sockaddr_un addr;
+	int result;
+
+	if (openl2tp_fd < 0) {
+		openl2tp_fd = socket(PF_UNIX, SOCK_DGRAM, 0);
+		if (openl2tp_fd < 0) {
+			error("openl2tp connection create: %m");
+			return -ENOTCONN;
+		}
+
+		addr.sun_family = AF_UNIX;
+		strcpy(&addr.sun_path[0], OPENL2TP_EVENT_SOCKET_NAME);
+
+		result = connect(openl2tp_fd, (struct sockaddr *) &addr,
+				 sizeof(addr));
+		if (result < 0) {
+			error("openl2tp connection connect: %m");
+			return -ENOTCONN;
+		}
+	}
+
+	return 0;
+}
+
+static void openl2tp_send_accm_ind(int tunnel_id, int session_id,
+				   uint32_t send_accm, uint32_t recv_accm)
+{
+	int result;
+	uint8_t buf[OPENL2TP_MSG_MAX_LEN];
+	struct openl2tp_event_msg *msg = (void *) &buf[0];
+	struct openl2tp_event_tlv *tlv;
+	uint16_t tid = tunnel_id;
+	uint16_t sid = session_id;
+	struct openl2tp_tlv_ppp_accm accm;
+
+	if (openl2tp_fd < 0) {
+		result = openl2tp_client_create();
+		if (result < 0) {
+			goto out;
+		}
+	}
+
+	accm.send_accm = send_accm;
+	accm.recv_accm = recv_accm;
+
+	msg->msg_signature = OPENL2TP_MSG_SIGNATURE;
+	msg->msg_type = OPENL2TP_MSG_TYPE_PPP_ACCM_IND;
+	msg->msg_len = 0;
+
+	tlv = (void *) &msg->msg_data[msg->msg_len];
+	tlv->tlv_type = OPENL2TP_TLV_TYPE_TUNNEL_ID;
+	tlv->tlv_len = sizeof(tid);
+	memcpy(&tlv->tlv_value[0], &tid, tlv->tlv_len);
+	msg->msg_len += sizeof(*tlv) + ALIGN32(tlv->tlv_len);
+
+	tlv = (void *) &msg->msg_data[msg->msg_len];
+	tlv->tlv_type = OPENL2TP_TLV_TYPE_SESSION_ID;
+	tlv->tlv_len = sizeof(sid);
+	memcpy(&tlv->tlv_value[0], &sid, tlv->tlv_len);
+	msg->msg_len += sizeof(*tlv) + ALIGN32(tlv->tlv_len);
+
+	tlv = (void *) &msg->msg_data[msg->msg_len];
+	tlv->tlv_type = OPENL2TP_TLV_TYPE_PPP_ACCM;
+	tlv->tlv_len = sizeof(accm);
+	memcpy(&tlv->tlv_value[0], &accm, tlv->tlv_len);
+	msg->msg_len += sizeof(*tlv) + ALIGN32(tlv->tlv_len);
+
+	result = send(openl2tp_fd, msg, sizeof(*msg) + msg->msg_len,
+		      MSG_NOSIGNAL);
+	if (result < 0) {
+		error("openl2tp send: %m");
+	}
+	if (result != (sizeof(*msg) + msg->msg_len)) {
+		warn("openl2tp send: unexpected byte count %d, expected %d",
+		     result, sizeof(msg) + msg->msg_len);
+	}
+	dbglog("openl2tp send: sent PPP_ACCM_IND, %d bytes", result);
+
+out:
+	if (old_pppol2tp_send_accm_hook != NULL) {
+		(*old_pppol2tp_send_accm_hook)(tunnel_id, session_id,
+					       send_accm, recv_accm);
+	}
+	return;
+}
+
+static void openl2tp_ppp_updown_ind(int tunnel_id, int session_id, int up)
+{
+	int result;
+	uint8_t buf[OPENL2TP_MSG_MAX_LEN];
+	struct openl2tp_event_msg *msg = (void *) &buf[0];
+	struct openl2tp_event_tlv *tlv;
+	uint16_t tid = tunnel_id;
+	uint16_t sid = session_id;
+	uint8_t state = up;
+	int unit = ifunit;
+	char *user_name = NULL;
+
+	if (openl2tp_fd < 0) {
+		result = openl2tp_client_create();
+		if (result < 0) {
+			goto out;
+		}
+	}
+
+	if (peer_authname[0] != '\0') {
+		user_name = strdup(peer_authname);
+	}
+
+	msg->msg_signature = OPENL2TP_MSG_SIGNATURE;
+	msg->msg_type = OPENL2TP_MSG_TYPE_PPP_UPDOWN_IND;
+	msg->msg_len = 0;
+
+	tlv = (void *) &msg->msg_data[msg->msg_len];
+	tlv->tlv_type = OPENL2TP_TLV_TYPE_TUNNEL_ID;
+	tlv->tlv_len = sizeof(tid);
+	memcpy(&tlv->tlv_value[0], &tid, tlv->tlv_len);
+	msg->msg_len += sizeof(*tlv) + ALIGN32(tlv->tlv_len);
+
+	tlv = (void *) &msg->msg_data[msg->msg_len];
+	tlv->tlv_type = OPENL2TP_TLV_TYPE_SESSION_ID;
+	tlv->tlv_len = sizeof(sid);
+	memcpy(&tlv->tlv_value[0], &sid, tlv->tlv_len);
+	msg->msg_len += sizeof(*tlv) + ALIGN32(tlv->tlv_len);
+
+	tlv = (void *) &msg->msg_data[msg->msg_len];
+	tlv->tlv_type = OPENL2TP_TLV_TYPE_PPP_STATE;
+	tlv->tlv_len = sizeof(state);
+	memcpy(&tlv->tlv_value[0], &state, tlv->tlv_len);
+	msg->msg_len += sizeof(*tlv) + ALIGN32(tlv->tlv_len);
+
+	tlv = (void *) &msg->msg_data[msg->msg_len];
+	tlv->tlv_type = OPENL2TP_TLV_TYPE_PPP_UNIT;
+	tlv->tlv_len = sizeof(unit);
+	memcpy(&tlv->tlv_value[0], &unit, tlv->tlv_len);
+	msg->msg_len += sizeof(*tlv) + ALIGN32(tlv->tlv_len);
+
+	tlv = (void *) &msg->msg_data[msg->msg_len];
+	tlv->tlv_type = OPENL2TP_TLV_TYPE_PPP_IFNAME;
+	tlv->tlv_len = strlen(ifname) + 1;
+	memcpy(&tlv->tlv_value[0], ifname, tlv->tlv_len);
+	msg->msg_len += sizeof(*tlv) + ALIGN32(tlv->tlv_len);
+
+	if (user_name != NULL) {
+		tlv = (void *) &msg->msg_data[msg->msg_len];
+		tlv->tlv_type = OPENL2TP_TLV_TYPE_PPP_USER_NAME;
+		tlv->tlv_len = strlen(user_name) + 1;
+		memcpy(&tlv->tlv_value[0], user_name, tlv->tlv_len);
+		msg->msg_len += sizeof(*tlv) + ALIGN32(tlv->tlv_len);
+	}
+
+	result = send(openl2tp_fd, msg, sizeof(*msg) + msg->msg_len,
+		      MSG_NOSIGNAL);
+	if (result < 0) {
+		error("openl2tp send: %m");
+	}
+	if (result != (sizeof(*msg) + msg->msg_len)) {
+		warn("openl2tp send: unexpected byte count %d, expected %d",
+		     result, sizeof(msg) + msg->msg_len);
+	}
+	dbglog("openl2tp send: sent PPP_UPDOWN_IND, %d bytes", result);
+
+out:
+	if (old_pppol2tp_ip_updown_hook != NULL) {
+		(*old_pppol2tp_ip_updown_hook)(tunnel_id, session_id, up);
+	}
+
+	return;
+}
+
+/*****************************************************************************
+ * When a multilink interface is created, there are 2 cases to consider.
+ *
+ * 1. The new interface is the first of a multilink bundle (master).
+ * 2. The new interface is being attached to an existing bundle.
+ *
+ * The first case is handled by existing code because the interface
+ * generates ip-up events just like standard interfaces. But in the
+ * second case, where the interface is added to an existing ppp
+ * bundle, pppd does not do IP negotiation and so as a result, no
+ * ip-up event is generated when the interface is created. Since
+ * openl2tpd needs the SESSION_PPP_UPDOWN_IND for all interfaces of a
+ * PPP bundle, we must fake the event.
+ *
+ * We use the ip_multilink_join_hook to hear when an interface joins a
+ * multilink bundle.
+ *****************************************************************************/
+
+static void openl2tp_multilink_join_ind(void)
+{
+	if (doing_multilink && !multilink_master) {
+		/* send event only if not master */
+		openl2tp_ppp_updown_ind(pppol2tp_tunnel_id,
+					pppol2tp_session_id, 1);
+	}
+}
+
+/*****************************************************************************
+ * Application init
+ *****************************************************************************/
+
+void plugin_init(void)
+{
+	old_pppol2tp_send_accm_hook = pppol2tp_send_accm_hook;
+	pppol2tp_send_accm_hook = openl2tp_send_accm_ind;
+
+	old_pppol2tp_ip_updown_hook = pppol2tp_ip_updown_hook;
+	pppol2tp_ip_updown_hook = openl2tp_ppp_updown_ind;
+
+	old_multilink_join_hook = multilink_join_hook;
+	multilink_join_hook = openl2tp_multilink_join_ind;
+}
+
diff -Nur ppp-2.4.4.orig/pppd/plugins/pppol2tp/pppol2tp.c ppp-2.4.4.new/pppd/plugins/pppol2tp/pppol2tp.c
--- ppp-2.4.4.orig/pppd/plugins/pppol2tp/pppol2tp.c	1970-01-01 08:00:00.000000000 +0800
+++ ppp-2.4.4.new/pppd/plugins/pppol2tp/pppol2tp.c	2014-01-14 12:37:46.166379915 +0800
@@ -0,0 +1,527 @@
+/* Modifications were made by Belkin International, Inc. on or before Fri Sep 13 14:13:39 PDT 2013 */
+/* pppol2tp.c - pppd plugin to implement PPPoL2TP protocol
+ *   for Linux using kernel pppol2tp support.
+ *
+ * Requires kernel pppol2tp driver which is integrated into the kernel
+ * from 2.6.23 onwards. For earlier kernels, a version can be obtained
+ * from the OpenL2TP project at
+ * http://www.sourceforge.net/projects/openl2tp/
+ *
+ * Original by Martijn van Oosterhout <kleptog@svana.org>
+ * Modified by jchapman@katalix.com
+ *
+ * Heavily based upon pppoatm.c: original notice follows
+ *
+ * Copyright 2000 Mitchell Blank Jr.
+ * Based in part on work from Jens Axboe and Paul Mackerras.
+ * Updated to ppp-2.4.1 by Bernhard Kaindl
+ *
+ *  This program is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License
+ *  as published by the Free Software Foundation; either version
+ *  2 of the License, or (at your option) any later version.
+ */
+#include <unistd.h>
+#include <string.h>
+#include <stdlib.h>
+#include <errno.h>
+#include "pppd.h"
+#include "pathnames.h"
+#include "fsm.h"
+#include "lcp.h"
+#include "ccp.h"
+#include "ipcp.h"
+#include <sys/stat.h>
+#include <net/if.h>
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <signal.h>
+#include <linux/version.h>
+#include <linux/sockios.h>
+#ifndef aligned_u64
+/* should be defined in sys/types.h */
+#define aligned_u64 unsigned long long __attribute__((aligned(8)))
+#endif
+#include <linux/types.h>
+#include <linux/if_ether.h>
+#include <linux/ppp_defs.h>
+#include <linux/if_ppp.h>
+#include <linux/if_pppox.h>
+#include <linux/if_pppol2tp.h>
+
+/* should be added to system's socket.h... */
+#ifndef SOL_PPPOL2TP
+#define SOL_PPPOL2TP	273
+#endif
+
+const char pppd_version[] = VERSION;
+
+static int setdevname_pppol2tp(char **argv);
+
+static int pppol2tp_fd = -1;
+static char *pppol2tp_fd_str;
+static bool pppol2tp_lns_mode = 0;
+static bool pppol2tp_recv_seq = 0;
+static bool pppol2tp_send_seq = 0;
+static int pppol2tp_debug_mask = 0;
+static int pppol2tp_reorder_timeout = 0;
+static char pppol2tp_ifname[32] = { 0, };
+int pppol2tp_tunnel_id = 0;
+int pppol2tp_session_id = 0;
+
+static int device_got_set = 0;
+struct channel pppol2tp_channel;
+
+static void (*old_snoop_recv_hook)(unsigned char *p, int len) = NULL;
+static void (*old_snoop_send_hook)(unsigned char *p, int len) = NULL;
+static void (*old_ip_up_hook)(void) = NULL;
+static void (*old_ip_down_hook)(void) = NULL;
+
+/* Hook provided to allow other plugins to handle ACCM changes */
+void (*pppol2tp_send_accm_hook)(int tunnel_id, int session_id,
+				uint32_t send_accm, uint32_t recv_accm) = NULL;
+
+/* Hook provided to allow other plugins to handle IP up/down */
+void (*pppol2tp_ip_updown_hook)(int tunnel_id, int session_id, int up) = NULL;
+
+static option_t pppol2tp_options[] = {
+	{ "pppol2tp", o_special, &setdevname_pppol2tp,
+	  "FD for PPPoL2TP socket", OPT_DEVNAM | OPT_A2STRVAL,
+          &pppol2tp_fd_str },
+	{ "pppol2tp_lns_mode", o_bool, &pppol2tp_lns_mode,
+	  "PPPoL2TP LNS behavior. Default off.",
+	  OPT_PRIO | OPRIO_CFGFILE },
+	{ "pppol2tp_send_seq", o_bool, &pppol2tp_send_seq,
+	  "PPPoL2TP enable sequence numbers in transmitted data packets. "
+	  "Default off.",
+	  OPT_PRIO | OPRIO_CFGFILE },
+	{ "pppol2tp_recv_seq", o_bool, &pppol2tp_recv_seq,
+	  "PPPoL2TP enforce sequence numbers in received data packets. "
+	  "Default off.",
+	  OPT_PRIO | OPRIO_CFGFILE },
+	{ "pppol2tp_reorderto", o_int, &pppol2tp_reorder_timeout,
+	  "PPPoL2TP data packet reorder timeout. Default 0 (no reordering).",
+	  OPT_PRIO },
+	{ "pppol2tp_debug_mask", o_int, &pppol2tp_debug_mask,
+	  "PPPoL2TP debug mask. Default: no debug.",
+	  OPT_PRIO },
+	{ "pppol2tp_ifname", o_string, &pppol2tp_ifname,
+	  "Set interface name of PPP interface",
+	  OPT_PRIO | OPT_PRIV | OPT_STATIC, NULL, 16 },
+	{ "pppol2tp_tunnel_id", o_int, &pppol2tp_tunnel_id,
+	  "PPPoL2TP tunnel_id.",
+	  OPT_PRIO },
+	{ "pppol2tp_session_id", o_int, &pppol2tp_session_id,
+	  "PPPoL2TP session_id.",
+	  OPT_PRIO },
+	{ NULL }
+};
+
+static int setdevname_pppol2tp(char **argv)
+{
+	struct sockaddr_pppol2tp sax;
+	int len = sizeof(sax);
+
+	if (device_got_set)
+		return 0;
+
+	if (!int_option(*argv, &pppol2tp_fd))
+		return 0;
+
+	if(getsockname(pppol2tp_fd, (struct sockaddr *)&sax, &len) < 0) {
+		fatal("Given FD for PPPoL2TP socket invalid (%s)",
+		      strerror(errno));
+	}
+	if(sax.sa_family != AF_PPPOX || sax.sa_protocol != PX_PROTO_OL2TP) {
+		fatal("Socket is not a PPPoL2TP socket");
+	}
+
+	/* Do a test getsockopt() to ensure that the kernel has the necessary
+	 * feature available.
+	 * driver returns -ENOTCONN until session established!
+	if (getsockopt(pppol2tp_fd, SOL_PPPOL2TP, PPPOL2TP_SO_DEBUG,
+		       &tmp, &tmp_len) < 0) {
+		fatal("PPPoL2TP kernel driver not installed");
+	} */
+
+	/* Setup option defaults. Compression options are disabled! */
+
+	modem = 0;
+
+	lcp_allowoptions[0].neg_accompression = 1;
+	lcp_wantoptions[0].neg_accompression = 0;
+
+	lcp_allowoptions[0].neg_pcompression = 1;
+	lcp_wantoptions[0].neg_pcompression = 0;
+
+	ccp_allowoptions[0].deflate = 0;
+	ccp_wantoptions[0].deflate = 0;
+
+	ipcp_allowoptions[0].neg_vj = 0;
+	ipcp_wantoptions[0].neg_vj = 0;
+
+	ccp_allowoptions[0].bsd_compress = 0;
+	ccp_wantoptions[0].bsd_compress = 0;
+
+	the_channel = &pppol2tp_channel;
+	device_got_set = 1;
+
+	return 1;
+}
+
+static int connect_pppol2tp(void)
+{
+	struct sockaddr_pppol2tp sax;
+	int len = sizeof(sax);
+
+	if(pppol2tp_fd == -1) {
+		fatal("No PPPoL2TP FD specified");
+	}
+
+	getsockname(pppol2tp_fd, (struct sockaddr *)&sax, &len);
+	sprintf(ppp_devnam,"l2tp (%s)",inet_ntoa(sax.pppol2tp.addr.sin_addr));
+
+	return pppol2tp_fd;
+}
+
+static void disconnect_pppol2tp(void)
+{
+	if (pppol2tp_fd >= 0) {
+		close(pppol2tp_fd);
+		pppol2tp_fd = -1;
+	}
+}
+
+static void send_config_pppol2tp(int mtu,
+			      u_int32_t asyncmap,
+			      int pcomp,
+			      int accomp)
+{
+	struct ifreq ifr;
+	int on = 1;
+	int fd;
+	char reorderto[16];
+	char tid[8];
+	char sid[8];
+
+	if (pppol2tp_ifname[0]) {
+		struct ifreq ifr;
+		int fd;
+
+		fd = socket(AF_INET, SOCK_DGRAM, 0);
+		if (fd >= 0) {
+			memset (&ifr, '\0', sizeof (ifr));
+			strlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
+			strlcpy(ifr.ifr_newname, pppol2tp_ifname,
+				sizeof(ifr.ifr_name));
+			ioctl(fd, SIOCSIFNAME, (caddr_t) &ifr);
+			strlcpy(ifname, pppol2tp_ifname, 32);
+			if (pppol2tp_debug_mask & PPPOL2TP_MSG_CONTROL) {
+				dbglog("ppp%d: interface name %s",
+				       ifunit, ifname);
+			}
+		}
+		close(fd);
+	}
+
+	if ((lcp_allowoptions[0].mru > 0) && (mtu > lcp_allowoptions[0].mru)) {
+		warn("Overriding mtu %d to %d", mtu, lcp_allowoptions[0].mru);
+		mtu = lcp_allowoptions[0].mru;
+	}
+	netif_set_mtu(ifunit, mtu);
+
+	reorderto[0] = '\0';
+	if (pppol2tp_reorder_timeout > 0)
+		sprintf(&reorderto[0], "%d ", pppol2tp_reorder_timeout);
+	tid[0] = '\0';
+	if (pppol2tp_tunnel_id > 0)
+		sprintf(&tid[0], "%hu ", pppol2tp_tunnel_id);
+	sid[0] = '\0';
+	if (pppol2tp_session_id > 0)
+		sprintf(&sid[0], "%hu ", pppol2tp_session_id);
+
+	dbglog("PPPoL2TP options: %s%s%s%s%s%s%s%s%sdebugmask %d",
+	       pppol2tp_recv_seq ? "recvseq " : "",
+	       pppol2tp_send_seq ? "sendseq " : "",
+	       pppol2tp_lns_mode ? "lnsmode " : "",
+	       pppol2tp_reorder_timeout ? "reorderto " : "", reorderto,
+	       pppol2tp_tunnel_id ? "tid " : "", tid,
+	       pppol2tp_session_id ? "sid " : "", sid,
+	       pppol2tp_debug_mask);
+
+	if (pppol2tp_recv_seq)
+		if (setsockopt(pppol2tp_fd, SOL_PPPOL2TP, PPPOL2TP_SO_RECVSEQ,
+			       &on, sizeof(on)) < 0)
+			fatal("setsockopt(PPPOL2TP_RECVSEQ): %m");
+	if (pppol2tp_send_seq)
+		if (setsockopt(pppol2tp_fd, SOL_PPPOL2TP, PPPOL2TP_SO_SENDSEQ,
+			       &on, sizeof(on)) < 0)
+			fatal("setsockopt(PPPOL2TP_SENDSEQ): %m");
+	if (pppol2tp_lns_mode)
+		if (setsockopt(pppol2tp_fd, SOL_PPPOL2TP, PPPOL2TP_SO_LNSMODE,
+			       &on, sizeof(on)) < 0)
+			fatal("setsockopt(PPPOL2TP_LNSMODE): %m");
+	if (pppol2tp_reorder_timeout)
+		if (setsockopt(pppol2tp_fd, SOL_PPPOL2TP, PPPOL2TP_SO_REORDERTO,
+			       &pppol2tp_reorder_timeout,
+			       sizeof(pppol2tp_reorder_timeout)) < 0)
+			fatal("setsockopt(PPPOL2TP_REORDERTO): %m");
+	if (pppol2tp_debug_mask)
+		if (setsockopt(pppol2tp_fd, SOL_PPPOL2TP, PPPOL2TP_SO_DEBUG,
+			       &pppol2tp_debug_mask, sizeof(pppol2tp_debug_mask)) < 0)
+			fatal("setsockopt(PPPOL2TP_DEBUG): %m");
+}
+
+static void recv_config_pppol2tp(int mru,
+			      u_int32_t asyncmap,
+			      int pcomp,
+			      int accomp)
+{
+	if ((lcp_allowoptions[0].mru > 0) && (mru > lcp_allowoptions[0].mru)) {
+		warn("Overriding mru %d to mtu value %d", mru,
+		     lcp_allowoptions[0].mru);
+		mru = lcp_allowoptions[0].mru;
+	}
+	if ((ifunit >= 0) && ioctl(pppol2tp_fd, PPPIOCSMRU, (caddr_t) &mru) < 0)
+		error("Couldn't set PPP MRU: %m");
+}
+
+/*****************************************************************************
+ * Snoop LCP message exchanges to capture negotiated ACCM values.
+ * When asyncmap values have been seen from both sides, give the values to
+ * L2TP.
+ * This code is derived from Roaring Penguin L2TP.
+ *****************************************************************************/
+
+static void pppol2tp_lcp_snoop(unsigned char *buf, int len, int incoming)
+{
+	static bool got_send_accm = 0;
+	static bool got_recv_accm = 0;
+	static uint32_t recv_accm = 0xffffffff;
+	static uint32_t send_accm = 0xffffffff;
+	static bool snooping = 1;
+
+	uint16_t protocol;
+	uint16_t lcp_pkt_len;
+	int opt, opt_len;
+	int reject;
+	unsigned char const *opt_data;
+	uint32_t accm;
+
+	/* Skip HDLC header */
+	buf += 2;
+	len -= 2;
+
+	/* Unreasonably short frame?? */
+	if (len <= 0) return;
+
+	/* Get protocol */
+	if (buf[0] & 0x01) {
+		/* Compressed protcol field */
+		protocol = buf[0];
+	} else {
+		protocol = ((unsigned int) buf[0]) * 256 + buf[1];
+	}
+
+	/* If it's a network protocol, stop snooping */
+	if (protocol <= 0x3fff) {
+		if (pppol2tp_debug_mask & PPPOL2TP_MSG_DEBUG) {
+			dbglog("Turning off snooping: "
+			       "Network protocol %04x found.",
+			       protocol);
+		}
+		snooping = 0;
+		return;
+	}
+
+	/* If it's not LCP, do not snoop */
+	if (protocol != 0xc021) {
+		return;
+	}
+
+	/* Skip protocol; go to packet data */
+	buf += 2;
+	len -= 2;
+
+	/* Unreasonably short frame?? */
+	if (len <= 0) return;
+
+	/* Look for Configure-Ack or Configure-Reject code */
+	if (buf[0] != CONFACK && buf[0] != CONFREJ) return;
+
+	reject = (buf[0] == CONFREJ);
+
+	lcp_pkt_len = ((unsigned int) buf[2]) * 256 + buf[3];
+
+	/* Something fishy with length field? */
+	if (lcp_pkt_len > len) return;
+
+	/* Skip to options */
+	len = lcp_pkt_len - 4;
+	buf += 4;
+
+	while (len > 0) {
+		/* Pull off an option */
+		opt = buf[0];
+		opt_len = buf[1];
+		opt_data = &buf[2];
+		if (opt_len > len || opt_len < 2) break;
+		len -= opt_len;
+		buf += opt_len;
+		if (pppol2tp_debug_mask & PPPOL2TP_MSG_DEBUG) {
+			dbglog("Found option type %02x; len %d", opt, opt_len);
+		}
+
+		/* We are specifically interested in ACCM */
+		if (opt == CI_ASYNCMAP && opt_len == 0x06) {
+			if (reject) {
+				/* ACCM negotiation REJECTED; use default */
+				accm = 0xffffffff;
+				if (pppol2tp_debug_mask & PPPOL2TP_MSG_DATA) {
+					dbglog("Rejected ACCM negotiation; "
+					       "defaulting (%s)",
+					       incoming ? "incoming" : "outgoing");
+				}
+				recv_accm = accm;
+				send_accm = accm;
+				got_recv_accm = 1;
+				got_send_accm = 1;
+			} else {
+				memcpy(&accm, opt_data, sizeof(accm));
+				if (pppol2tp_debug_mask & PPPOL2TP_MSG_DATA) {
+					dbglog("Found ACCM of %08x (%s)", accm,
+					       incoming ? "incoming" : "outgoing");
+				}
+				if (incoming) {
+					recv_accm = accm;
+					got_recv_accm = 1;
+				} else {
+					send_accm = accm;
+					got_send_accm = 1;
+				}
+			}
+
+			if (got_recv_accm && got_send_accm) {
+				if (pppol2tp_debug_mask & PPPOL2TP_MSG_CONTROL) {
+					dbglog("Telling L2TP: Send ACCM = %08x; "
+					       "Receive ACCM = %08x", send_accm, recv_accm);
+				}
+				if (pppol2tp_send_accm_hook != NULL) {
+					(*pppol2tp_send_accm_hook)(pppol2tp_tunnel_id,
+								   pppol2tp_session_id,
+								   send_accm, recv_accm);
+				}
+				got_recv_accm = 0;
+				got_send_accm = 0;
+			}
+		}
+	}
+}
+
+static void pppol2tp_lcp_snoop_recv(unsigned char *p, int len)
+{
+	if (old_snoop_recv_hook != NULL)
+		(*old_snoop_recv_hook)(p, len);
+	pppol2tp_lcp_snoop(p, len, 1);
+}
+
+static void pppol2tp_lcp_snoop_send(unsigned char *p, int len)
+{
+	if (old_snoop_send_hook != NULL)
+		(*old_snoop_send_hook)(p, len);
+	pppol2tp_lcp_snoop(p, len, 0);
+}
+
+/*****************************************************************************
+ * Interface up/down events
+ *****************************************************************************/
+
+static void pppol2tp_ip_up_hook(void)
+{
+	if (old_ip_up_hook != NULL)
+		(*old_ip_up_hook)();
+
+	if (pppol2tp_ip_updown_hook != NULL) {
+		(*pppol2tp_ip_updown_hook)(pppol2tp_tunnel_id,
+					   pppol2tp_session_id, 1);
+	}
+}
+
+static void pppol2tp_ip_down_hook(void)
+{
+	if (old_ip_down_hook != NULL)
+		(*old_ip_down_hook)();
+
+	if (pppol2tp_ip_updown_hook != NULL) {
+		(*pppol2tp_ip_updown_hook)(pppol2tp_tunnel_id,
+					   pppol2tp_session_id, 0);
+	}
+}
+
+/*****************************************************************************
+ * Application init
+ *****************************************************************************/
+
+static void pppol2tp_check_options(void)
+{
+	/* Enable LCP snooping for ACCM options only for LNS */
+	if (pppol2tp_lns_mode) {
+		if ((pppol2tp_tunnel_id == 0) || (pppol2tp_session_id == 0)) {
+			fatal("tunnel_id/session_id values not specified");
+		}
+		if (pppol2tp_debug_mask & PPPOL2TP_MSG_CONTROL) {
+			dbglog("Enabling LCP snooping");
+		}
+		old_snoop_recv_hook = snoop_recv_hook;
+		old_snoop_send_hook = snoop_send_hook;
+
+		snoop_recv_hook = pppol2tp_lcp_snoop_recv;
+		snoop_send_hook = pppol2tp_lcp_snoop_send;
+	}
+
+	/* If pppol2tp_ifname not supplied, use ip_up_hook to discover interface */
+	if (!pppol2tp_ifname[0]) {
+		old_ip_up_hook = ip_up_hook;
+		ip_up_hook = pppol2tp_ip_up_hook;
+		old_ip_down_hook = ip_down_hook;
+		ip_down_hook = pppol2tp_ip_down_hook;
+	}
+}
+
+/* Called just before pppd exits.
+ */
+static void pppol2tp_cleanup(void)
+{
+	if (pppol2tp_debug_mask & PPPOL2TP_MSG_DEBUG) {
+		dbglog("pppol2tp: exiting.");
+	}
+	disconnect_pppol2tp();
+}
+
+void plugin_init(void)
+{
+#if defined(__linux__)
+	extern int new_style_driver;	/* From sys-linux.c */
+	if (!ppp_available() && !new_style_driver)
+		fatal("Kernel doesn't support ppp_generic - "
+		    "needed for PPPoL2TP");
+#else
+	fatal("No PPPoL2TP support on this OS");
+#endif
+	add_options(pppol2tp_options);
+}
+
+struct channel pppol2tp_channel = {
+    options: pppol2tp_options,
+    process_extra_options: NULL,
+    check_options: &pppol2tp_check_options,
+    connect: &connect_pppol2tp,
+    disconnect: &disconnect_pppol2tp,
+    establish_ppp: &generic_establish_ppp,
+    disestablish_ppp: &generic_disestablish_ppp,
+    send_config: &send_config_pppol2tp,
+    recv_config: &recv_config_pppol2tp,
+    close: NULL,
+    cleanup: NULL
+};
